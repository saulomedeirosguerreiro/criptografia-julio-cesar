import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

import com.squareup.okhttp.MediaType;
import com.squareup.okhttp.MultipartBuilder;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.Response;

public class Teste {
	private static  String token = "09b55d779ff57cfb3bb2f2a4001d07c94d8e17eb";//Original
	
	public static void main(String[] args) throws Exception {

		// String content = requestGet();
		// salvarConteudoEmArquivo(content);
		// decifrar("a", 5);
		/*codificar SHA-1 
		System.out.println("HashCode Generated by SHA-1 for: ");

		String s1 = "GeeksForGeeks";
		System.out.println("\n" + s1 + " : " + sha1Encrypt(s1));
		 */
		
		//requestPost();

	}

	// Requisição GET - ok
	public static String requestGet() throws Exception {
		URL url = new URL(
				"https://api.codenation.dev/v1/challenge/dev-ps/generate-data?token="+ token);

		HttpURLConnection myUrlConnection = (HttpURLConnection) url.openConnection();
		myUrlConnection.setRequestMethod("GET");
		myUrlConnection.connect();

		Scanner scanner = new Scanner(myUrlConnection.getInputStream());
		String result = scanner.nextLine();
		scanner.close();

		System.out.println("textoDoServidor: " + result);
		myUrlConnection.disconnect();

		return result;
	}

	// Criar e Salvar em arquivo - ok
	public static File criarOuRecuperarArquivo(String path) throws IOException {
		File file = new File(path);
		if (!file.exists())
			file.createNewFile();
		return file;
	}

	public static void salvarConteudoEmArquivo(String content) throws IOException {
		File file = criarOuRecuperarArquivo("answer.json");
		PrintWriter printWriter = new PrintWriter(file);
		printWriter.print(content);
		printWriter.close();
	}

	// Cifra de Cesar - ok

	public static void decifrar(String cipherText, int numeroCasas) {

		cipherText = cipherText.toLowerCase();
		String decifrado = "";
		char caractere;
		for (int i = 0; i < cipherText.length(); i++) {
			caractere = cipherText.charAt(i);
			caractere = substituirLetra(caractere, numeroCasas);
			decifrado += caractere;
		}
		System.out.println(decifrado);

	}

	public static char substituirLetra(char antigoCaractere, int numeroCasas) {

		String alfabeto = "abcdefghijklmnopqrstuvwxyz";
		if (alfabeto.contains(String.valueOf(antigoCaractere))) {
			int posicaoNovoCaractere = (alfabeto.indexOf(antigoCaractere) - numeroCasas);
			int resto = posicaoNovoCaractere < 0 ? posicaoNovoCaractere % 26 + 26 : posicaoNovoCaractere % 26;
			return alfabeto.charAt(resto);
		}

		return antigoCaractere;
	}

	// SHA-1 - ok

	public static String sha1Encrypt(String input) throws NoSuchAlgorithmException {
		MessageDigest md = MessageDigest.getInstance("SHA-1");

		byte[] messageDigest = md.digest(input.getBytes());

		BigInteger no = new BigInteger(1, messageDigest);

		String hashtext = no.toString(16);

		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}

		return hashtext;
	}

	// Converter File to Array de Byte

	public static byte[] bytesFromFile(String path) throws IOException {
		File file = criarOuRecuperarArquivo(path);
		byte[] bytesArray = new byte[(int) file.length()];
		return bytesArray;
	}

	// Requisição POST - ok

	public static void requestPost() throws IOException {

		OkHttpClient client = new OkHttpClient();

		RequestBody body = new MultipartBuilder()
			        .type(MultipartBuilder.FORM)
			        .addFormDataPart("answer", "answer.json",
			            RequestBody.create(MediaType.parse("application/json"), new File("answer.json")))
			        .build();
		
		
		Request request = new Request.Builder()
		  .url("https://api.codenation.dev/v1/challenge/dev-ps/submit-solution?token="+token)
		  .post(body)
		  .build();

		Response response = client.newCall(request).execute();

		
		if (response.isSuccessful()) {
			System.out.println("Sucess! File posted !");
			System.out.println("HTTP STATUS = " + response.code());
			System.out.println("HTTP POST (Send File) - Response from the server: " + response.body().string());
		}else {
			System.out.println("Failed! File not posted !");
			System.out.println("HTTP STATUS = " + response.code());
			System.out.println("HTTP POST (Send File) - Response from the server: " + response.body().string());
		}
	}
	
}
